import asyncio
import datetime
import functools


from aiogram import Bot
from aiogram.types import FSInputFile
from aiogram.exceptions import TelegramForbiddenError, TelegramAPIError


from app.api_v1.orm import AsyncOrm, User

from app.api_v1.utils.tools import send_logs_email

from app.api_v1.utils.logging import setup_logger
from . import outline_helper


from app.api_v1.markups import build_payment_kb


file_path = "app/api_v1/utils/images/image2.jpg"
foto = "app/api_v1/utils/images/image4.jpg"

logger = setup_logger(__name__)


def async_repeat(interval):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º.
    """
    def decorator(func):
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            while True:
                await func(*args, **kwargs)
                await asyncio.sleep(interval)  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        return wrapper
    return decorator


def check_user_expiration(user: User) -> bool:
    if user.expiration_date:
        current_date = datetime.datetime.now().date()
        expiration_date = datetime.datetime.strptime(
            user.expiration_date,
            "%d-%m-%Y",
        ).date()
        delta = expiration_date - current_date
        if 0 < delta.days <= 3:
            return True
    return False


def check_user_for_sub_ended(user: User) -> bool:
    if user.expiration_date:
        current_date = datetime.datetime.now().date()
        expiration_date = datetime.datetime.strptime(
            user.expiration_date,
            "%d-%m-%Y",
        ).date()
        delta = expiration_date - current_date
        if -10 < delta.days < 0:
            return True
    return False


async def check_subscription_expiry():
    try:
        users = await AsyncOrm.get_users_by_subscription()
        current_date = datetime.datetime.now().date()

        for user in users:
            expiration_date = user.expiration_date
            if expiration_date is not None:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É expiration_date –≤ –æ–±—ä–µ–∫—Ç datetime –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                expiration_date = datetime.datetime.strptime(
                    expiration_date, "%d-%m-%Y"
                ).date()

                if current_date > expiration_date:
                    if user.key:
                        await AsyncOrm.update_user(
                            tg_id=user.tg_id,
                            subscription=False,
                        )
                        outline_helper.set_key_limit(key_id=user.key.api_id)
            else:
                # –ï—Å–ª–∏ expiration_date —Ä–∞–≤–µ–Ω None, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                logger.error(f"User {user.id} has no subscription expiration date set.")

    except Exception as e:
        error_msg = f"An error occurred in check_subscription_expiry: {e}"
        logger.error(error_msg)


async def send_subscription_reminder(bot: Bot) -> None:
    users = await AsyncOrm.get_users_by_subscription()
    for user in users:
        tg_id = user.tg_id
        try:
            if check_user_expiration(user):
                await bot.send_photo(
                    photo=FSInputFile(
                        path=file_path,
                    ),
                    chat_id=tg_id,
                    caption=(
                        f"–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è {user.expiration_date}üëã\n"
                        "–ù–µ –∑–∞–±—É–¥—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN‚úÖ"
                    ),
                    reply_markup=build_payment_kb(),
                )

        except TelegramAPIError as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}"
            logger.error(error_msg)

        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            error_msg = f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}"
            logger.error(error_msg)


async def weed_out_active_users(bot: Bot) -> None:
    users = await AsyncOrm.get_users()
    for user in users:
        try:
            tg_id = user.tg_id
            if check_user_for_sub_ended(user):
                await bot.send_photo(
                    photo=FSInputFile(
                        path=file_path,
                    ),
                    chat_id=tg_id,
                    caption=(
                        f"–ü—Ä–∏–≤–µ—Ç! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å {user.expiration_date}üò¢\n"
                        "–ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É, —á—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É VPN‚úÖ"
                    ),
                    reply_markup=build_payment_kb(),
                )

        except TelegramForbiddenError as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è TelegramForbiddenError (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
            error_msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞: {e}"
            logger.warning(error_msg)

        except TelegramAPIError as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π API Telegram
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}"
            logger.error(error_msg)

        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            error_msg = f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}"
            logger.error(error_msg)


async def send_reminder_for_inactive(bot: Bot) -> None:
    users = await AsyncOrm.get_users()

    text = (
        "–î—Ä—É–∑—å—è, –º—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å—Ç–∞—Ä–∞–µ–º—Å—è —É–ª—É—á—à–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å VPN-—Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞. "
        "–í —Å–≤—è–∑–∏ —Å —ç—Ç–∏–º, –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞, —á—Ç–æ–±—ã —Å–∞–π—Ç—ã –æ—Ç–∫—Ä—ã–≤–∞–ª–∏—Å—å –µ—â–µ –±—ã—Å—Ç—Ä–µ–µ "
        "–∏ –±—ã–ª–∏ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤–∞—Å ü§ó. –í –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ '–ö–ª—é—á Outline' –ø–æ—è–≤–∏–ª—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á, "
        "–∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π –∏ –∫–æ–ø–∏—Ä—É–µ—Ç –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É, –µ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫ –≤–∞—à–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é —Ç–æ—á–Ω–æ —Ç–∞–∫–∂–µ. "
        "–°—Ç–∞—Ä—ã–π –∫–ª—é—á –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å 07.11.2024. –î–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ç–∞–∫ –∏ –Ω–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –∏–ª–∏ –Ω–µ –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É, "
        "–º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –≤ –≤–∏–¥–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ —Å—Ä–æ–∫–æ–º –Ω–∞ 5 –¥–Ω–µ–πüòé, —á—Ç–æ–±—ã –≤—ã –ª–∏—á–Ω–æ —É–±–µ–¥–∏–ª–∏—Å—å —á—Ç–æ —Å–µ—Ä–≤–∏—Å –Ω–µ —Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ!"
    )
    for user in users:
        tg_id = user.tg_id

        try:

            await bot.send_photo(
                photo=FSInputFile(
                    path=file_path,
                ),
                chat_id=tg_id,
                caption=text,
            )

        except TelegramForbiddenError as e:
            error_msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞: {e}"
            logger.error(error_msg)
            await AsyncOrm.delete_user(tg_id=tg_id)

        except TelegramAPIError as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π API Telegram
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}"
            logger.error(error_msg)

        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            error_msg = f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}"
            logger.error(error_msg)

async def send_to_users(bot: Bot) -> None:

    users = await AsyncOrm.get_users()
    text = (
        "<b>–î—Ä—É–∑—å—è</b>, –º—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å—Ç–∞—Ä–∞–µ–º—Å—è —É–ª—É—á—à–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å VPN-—Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞. "
        "–í —Å–≤—è–∑–∏ —Å —ç—Ç–∏–º –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ <b>–æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞</b>, —á—Ç–æ–±—ã —Å–∞–π—Ç—ã <u>–æ—Ç–∫—Ä—ã–≤–∞–ª–∏—Å—å –µ—â—ë –±—ã—Å—Ç—Ä–µ–µ</u> "
        "–∏ –≤—Å–µ–≥–¥–∞ –±—ã–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤–∞—Å ü§ó. –í –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ '<i>–ö–ª—é—á Outline</i>' –ø–æ—è–≤–∏–ª—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á, "
        "–∫–æ—Ç–æ—Ä—ã–π <b>–ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π</b> –∏ –∫–æ–ø–∏—Ä—É–µ—Ç –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É. –ï–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫ –≤–∞—à–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ. "
        "<i>–°—Ç–∞—Ä—ã–π –∫–ª—é—á</i> –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å <b>11.11.2024</b>. –î–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ç–∞–∫ –∏ –Ω–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –∏–ª–∏ –Ω–µ –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É, "
        "–º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –≤ –≤–∏–¥–µ <b>–±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ —Å—Ä–æ–∫–æ–º –Ω–∞ 5 –¥–Ω–µ–π</b>, —á—Ç–æ–±—ã –≤—ã –ª–∏—á–Ω–æ —É–±–µ–¥–∏–ª–∏—Å—å, —á—Ç–æ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –Ω–µ —Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ! üòé"
    )

    for user in users:
        tg_id = user.tg_id

        try:

            await bot.send_photo(
                photo=FSInputFile(
                    path=foto,
                ),
                chat_id=tg_id,
                caption=text,
            )

        except TelegramForbiddenError as e:
            error_msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞: {e}"
            logger.error(error_msg)
            await AsyncOrm.delete_user(tg_id=tg_id)

        except TelegramAPIError as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π API Telegram
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}"
            logger.error(error_msg)

        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            error_msg = f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}"
            logger.error(error_msg)

async def send_youtube_message(bot: Bot) -> None:
    users = await AsyncOrm.get_inactive_users()
    for user in users:
        tg_id = user.tg_id
        try:
            await bot.send_photo(
                photo=FSInputFile(
                    path=file_path,
                ),
                chat_id=tg_id,
                caption="–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ —Ç–æ—Ä–º–æ–∑–∏—Ç Youtube? –¢—ã –∑–Ω–∞–µ—à—å —á—Ç–æ –¥–µ–ª–∞—Ç—å‚úÖ",
                reply_markup=build_payment_kb(),
            )

        except TelegramForbiddenError as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è TelegramForbiddenError (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
            error_msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞: {e}"
            logger.warning(error_msg)

        except TelegramAPIError as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π API Telegram
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}"
            logger.error(error_msg)

        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            error_msg = f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}"
            logger.error(error_msg)


@async_repeat(interval=24 * 3600)
async def schedule_next_check():
    try:
        await check_subscription_expiry()
        await send_logs_email()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ schedule_next_check: {e}")

@async_repeat(interval=168 * 3600)
async def schedule_next_reminder(bot: Bot):
    try:
        await weed_out_active_users(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


async def schedule_reminder_to_inactive(bot: Bot):
    while True:
        await send_reminder_for_inactive(bot)
        await asyncio.sleep(336 * 3600)
