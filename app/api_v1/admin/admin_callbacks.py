import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.utils import markdown

from app.api_v1.orm.crud import AsyncOrm

from app.api_v1.admin import (
    build_admin_kb,
    build_stat_kb,
    back_to_admin_panel_kb,
    AdminActions,
    AdminCbData,
)
from app.api_v1.markups import build_main_kb

from app.api_v1.utils.logging import setup_logger

router = Router(name=__name__)

logger = setup_logger(__name__)


@router.callback_query(
    AdminCbData.filter(
        F.action == AdminActions.admin_panel,
    )
)
async def handle_admin_button(call: CallbackQuery):
    await call.answer()

    try:
        await call.message.edit_caption(
            caption="<b>–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>üíª\n\n"
            f"–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç {1} —á–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞\n"
            f"–§–∞–π–ª –ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏ {1}",
            reply_markup=build_stat_kb(),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: {e}")


@router.callback_query(AdminCbData.filter(F.action == AdminActions.statistic))
async def handle_stat_button(call: CallbackQuery):
    await call.answer()
    try:
        users = await AsyncOrm.get_users()

        today = datetime.datetime.now()
        count_users = len(users)
        active_users = 0
        subs_today = 0
        count_inactive = 0
        for user in users:
            if user.subscription:
                active_users += 1
                sub_date = datetime.datetime.strptime(
                    user.subscribe_date,
                    "%d-%m-%Y",
                )
                if sub_date == today:
                    subs_today += 1
            if not user.key:
                count_inactive += 1

        await call.message.edit_caption(
            caption=f"C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞ {today.strftime('%d-%m-%Y')}üìä\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count_users}\n"
            f"–ö–æ–ª-–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {subs_today}\n"
            f"–ö–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
            f"–ö–æ–ª-–≤–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count_inactive}",
            reply_markup=back_to_admin_panel_kb(),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ: {e}")


@router.callback_query(
    AdminCbData.filter(
        F.action == AdminActions.back_to_main,
    )
)
async def handle_back_to_main_button(call: CallbackQuery):
    await call.answer()
    await call.message.edit_caption(
        caption=markdown.hbold(
            "üöÄ  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ 1 –∫–ª–∏–∫, –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏\n\n"
            "üõ°  –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º—ã –∏ –ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å\n\n"
            "üî•  –¢–≤–æ–π –ª–∏—á–Ω—ã–π VPN –ø–æ —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —Ü–µ–Ω–µ\n\n"
            "üí∞  –¶–µ–Ω–∞: 1Ã∂9Ã∂9Ã∂—Ä—É–± üí•150 —Ä—É–±/–º–µ—Å",
        ),
        reply_markup=build_main_kb(),
    )


@router.callback_query(
    AdminCbData.filter(
        F.action == AdminActions.back_to_root_panel,
    )
)
async def handle_root_panel_button(call: CallbackQuery):
    await call.answer()
    await call.message.edit_caption(
        caption="–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ü•∏",
        reply_markup=build_admin_kb(),
    )


@router.callback_query(
    AdminCbData.filter(
        F.action == AdminActions.back_root_admin,
    )
)
async def handle_back_to_admin_button(call: CallbackQuery):
    await call.answer()
    try:
        await call.message.edit_caption(
            caption="<b>–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>üíª\n\n"
            f"–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç {1} —á–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞\n"
            f"–§–∞–π–ª –ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏: {logs}",
            reply_markup=build_stat_kb(),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: {e}")
