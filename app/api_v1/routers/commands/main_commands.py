from aiogram.filters import Command, CommandStart
from aiogram.utils import markdown
from aiogram.types import Message, FSInputFile
from aiogram import Router

from app.api_v1 import (
    build_main_kb,
    build_payment_kb,
    build_account_kb,
)


from app.api_v1.core.crud import AsyncOrm

from app.api_v1.utils.chek_user import check_user_expiration


router = Router(name=__name__)

file_path = "app/api_v1/utils/images/image1.jpg"


@router.message(CommandStart())
async def command_start_handler(message: Message):
    """Checking user if he is in the database"""
    user = await AsyncOrm.get_user(
        tg_id=message.from_user.id,
    )
    if user:
        if await check_user_expiration(tg_id=user.tg_id):
            await message.answer_photo(
                photo=FSInputFile(
                    path=file_path,
                ),
                caption=markdown.hbold(
                    f"C –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!\n"
                    "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å"
                ),
                reply_markup=build_account_kb(
                    user=user,
                ),
            )
            return

    else:
        await AsyncOrm.create_user(
            tg_id=message.from_user.id,
            username=message.from_user.username,
        )

    await message.answer_photo(
        photo=FSInputFile(
            path=file_path,
        ),
        caption=markdown.hbold(
            "üöÄ  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ 1 –∫–ª–∏–∫, –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏\n\n"
            "üõ°  –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º—ã –∏ –ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å\n\n"
            "üî•  –¢–≤–æ–π –ª–∏—á–Ω—ã–π VPN –ø–æ —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —Ü–µ–Ω–µ\n\n"
            "üí∞  –¶–µ–Ω–∞: 1Ã∂9Ã∂9Ã∂—Ä—É–± üí•129 —Ä—É–±/–º–µ—Å",
        ),
        reply_markup=build_main_kb(),
    )


@router.message(Command("partners", prefix="!/"))
async def command_help_handler(message: Message):
    await message.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")


@router.message(Command("account", prefix="!/"))
async def show_profile_handler(message: Message):
    user = await AsyncOrm.get_user(
        tg_id=message.from_user.id,
    )

    text = (
        f"<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
        f"üÜî {user.tg_id} \n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance}—Ä—É–±\n\n"
        f"<i>–î–ª—è –æ–ø–ª–∞—Ç—ã –∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è VPN –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–ª–∞–Ω—Å.\n</i>"
        f"<i>–î–ª—è –µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏—à–∏ –Ω–∏–∂–µ</i>"
    )
    if await check_user_expiration(tg_id=user.tg_id):
        await message.answer(
            text=text,
            reply_markup=build_account_kb(user=user),
        )

    else:
        await message.answer(
            text=text,
            reply_markup=build_account_kb(),
        )


@router.message(Command("payment", prefix="!/"))
async def refill_user_balance(message: Message):

    await message.answer_photo(
        photo=FSInputFile(
            path=file_path,
        ),
        caption=markdown.hbold("üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"),
        reply_markup=build_payment_kb(),
    )
