from aiogram.filters import Command, CommandStart
from aiogram.utils import markdown

from aiogram.types import Message, FSInputFile
from aiogram import Router

from app.api_v1.markups import (
    build_main_kb,
    build_payment_kb,
    build_account_kb,
    root_kb,
)


from app.api_v1.orm.crud import AsyncOrm


from app.api_v1.utils import (
    check_for_referral,
)

from app.api_v1.utils.logging import setup_logger

router = Router(name=__name__)
logger = setup_logger(__name__)

file_path = "app/api_v1/utils/images/image2.jpg"


@router.message(CommandStart())
async def command_start_handler(message: Message):
    """Checking user if he is in the database"""
    try:

        user_check = await AsyncOrm.get_user(
            tg_id=message.from_user.id,
        )
        referrer_id = check_for_referral(message)
        if not user_check:
            user = await AsyncOrm.create_user(
                tg_id=message.from_user.id,
                username=message.from_user.username,
            )
            if referrer_id:
                refferer = await AsyncOrm.get_user(
                    tg_id=referrer_id,
                )
                discount = refferer.discount + 1 if refferer.discount != 50 else 50
                await AsyncOrm.update_user(
                    tg_id=referrer_id,
                    referral=user,
                    discount=discount,
                )
        else:
            if referrer_id:
                refferer = await AsyncOrm.get_user(
                    tg_id=referrer_id,
                )
                discount = refferer.discount + 1 if refferer.discount != 50 else 50
                await AsyncOrm.update_user(
                    tg_id=referrer_id,
                    referral=user_check,
                    discount=discount,
                )
        await message.answer_photo(
            photo=FSInputFile(
                path=file_path,
            ),
            caption=markdown.hbold(
                "üöÄ  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ 1 –∫–ª–∏–∫, –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏\n\n"
                "üõ°  –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º—ã –∏ –ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å\n\n"
                "üî•  –¢–≤–æ–π –ª–∏—á–Ω—ã–π VPN –ø–æ —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —Ü–µ–Ω–µ\n\n"
                "üí∞  –¶–µ–Ω–∞: 1Ã∂9Ã∂9Ã∂—Ä—É–± üí•150 —Ä—É–±/–º–µ—Å",
            ),
            reply_markup=build_main_kb(),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç: {e}")


@router.message(Command("partners", prefix="!/"))
async def command_help_handler(message: Message):
    await message.answer_photo(
        photo=FSInputFile(
            path=file_path,
        ),
        caption="–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!",
        reply_markup=root_kb(),
    )


@router.message(Command("account", prefix="!/"))
async def show_profile_handler(message: Message):
    try:

        user = await AsyncOrm.get_user(
            tg_id=message.from_user.id,
        )
        if user:
            subscribe = user.expiration_date

            if subscribe:
                sub_info = f"–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {subscribe}"
            else:
                sub_info = "–ù–µ –∞–∫—Ç–∏–≤–Ω–∞"

            discount = user.discount if user.discount else 0
        else:
            sub_info = "–ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
            discount = 0

        url = markdown.hlink(
            "–°—Å—ã–ª–∫–∞",
            f"https://t.me/Real_vpnBot?start={user.tg_id}",
        )
        text = (
            f"<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
            f"üÜî {user.tg_id} \n"
            f"üóì –ü–æ–¥–ø–∏—Å–∫–∞: <i>{sub_info}</i>\n"
            f"üéÅ –°–∫–∏–¥–∫–∞: <b>{discount}%</b>\n"
            f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <i>{url}</i>\n\n"
            f"<i>–ù–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ.</i>\n"
            f"<i>–î–ª—è –æ–ø–ª–∞—Ç—ã –∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—é—á—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏—à–∏ –Ω–∏–∂–µ‚¨áÔ∏è</i>"
        )
        if user:
            await message.answer_photo(
                photo=FSInputFile(
                    path=file_path,
                ),
                caption=text,
                reply_markup=build_account_kb(),
            )

        else:
            await message.answer_photo(
                photo=FSInputFile(
                    path=file_path,
                ),
                caption=text,
                reply_markup=build_account_kb(),
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –∞–∫–∫–∞—É–Ω—Ç: {e}")


@router.message(Command("payment", prefix="!/"))
async def refill_user_balance(message: Message):

    await message.answer_photo(
        photo=FSInputFile(
            path=file_path,
        ),
        caption=markdown.hbold("üí∞ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏:"),
        reply_markup=build_payment_kb(),
    )
