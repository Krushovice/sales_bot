from datetime import datetime, timedelta
from aiogram.filters import Command, CommandStart
from aiogram.utils import markdown

from aiogram.types import Message, FSInputFile
from aiogram import Router

from app.api_v1.markups import (
    build_main_kb,
    build_payment_kb,
    build_account_kb,
    build_account_menu,
)

from app.api_v1.admin import build_admin_kb

from app.api_v1.orm import AsyncOrm, Key

from app.api_v1.config import settings

from app.api_v1.utils import (
    check_for_referral,
    outline_helper,
)

from app.api_v1.utils.logging import setup_logger

router = Router(name=__name__)
logger = setup_logger(__name__)

file_path = "app/api_v1/utils/images/image2.jpg"


@router.message(CommandStart())
async def command_start_handler(message: Message):

    try:
        tg_id = message.from_user.id
        today = datetime.now()
        delta = timedelta(days=7)
        expiration_date = (today + delta).strftime("%d-%m-%Y")
        user_exists = await AsyncOrm.get_user(tg_id=tg_id)

        if not user_exists:
            """Check user start command for referral link"""
            referrer_id = check_for_referral(message)

            if referrer_id and referrer_id != tg_id:
                key = outline_helper.create_new_key(name=tg_id)
                new_user = await AsyncOrm.create_user(
                    tg_id=tg_id,
                    username=message.from_user.username,
                    subscription=True,
                    subscribe_date=today.strftime("%d-%m-%Y"),
                    expiration_date=expiration_date,
                )
                await AsyncOrm.update_user(
                    tg_id=new_user.tg_id,
                    key=Key(
                        api_id=int(key.key_id),
                        name=key.name,
                        user_id=new_user.id,
                        value=key.access_url,
                    ),
                )

                await AsyncOrm.update_user(
                    tg_id=referrer_id,
                    referral=new_user,
                )
            else:
                await AsyncOrm.create_user(
                    tg_id=tg_id,
                    username=message.from_user.username,
                )

        await message.answer_photo(
            photo=FSInputFile(
                path=file_path,
            ),
            caption=markdown.hbold(
                "üöÄ  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ 1 –∫–ª–∏–∫, –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏\n\n"
                "üõ°  –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º—ã –∏ –ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å\n\n"
                "üî•  –¢–≤–æ–π –ª–∏—á–Ω—ã–π VPN –ø–æ —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —Ü–µ–Ω–µ\n\n"
                "üí∞  –¶–µ–Ω–∞: 1Ã∂9Ã∂9Ã∂—Ä—É–± üí•150 —Ä—É–±/–º–µ—Å",
            ),
            reply_markup=build_main_kb(),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç: {e}")


@router.message(Command("partners", prefix="!/"))
async def command_help_handler(message: Message):
    url = markdown.hlink(
        "–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞",
        f"https://t.me/Real_vpnBot?start={message.from_user.id}",
    )
    await message.answer_photo(
        photo=FSInputFile(
            path=file_path,
        ),
        caption="–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –Ω–∞—à–∏–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å "
        "–Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µüë•. –ó–∞ –ø–µ—Ä–≤–æ–≥–æ "
        "–ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è —Å–∫–∏–¥–∫–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ 5%, –∑–∞ –∫–∞–∂–¥–æ–≥–æ "
        "–ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ - 7, 14 –∏–ª–∏ 21 –±–æ–Ω—É—Å–Ω—ã–π –¥–µ–Ω—å –∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç "
        "–∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤ —É –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞. "
        f"<b>{url}</b>, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë –∏ —Ä–∞–∑–æ—à–ª–∏—Ç–µ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º üòé "
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤ —Å–≤–æ–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ",
        reply_markup=build_account_menu(),
    )


@router.message(Command("account", prefix="!/"))
async def show_profile_handler(message: Message):
    try:
        if message.from_user.id == int(settings.ADMIN_ID):
            await message.answer_photo(
                photo=FSInputFile(
                    path=file_path,
                ),
                caption=(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.username}!"),
                reply_markup=build_admin_kb(),
            )
        else:

            user = await AsyncOrm.get_user(
                tg_id=message.from_user.id,
            )
            if user:
                subscribe = user.expiration_date

                if subscribe:
                    sub_info = f"–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {subscribe}"
                else:
                    sub_info = "–ù–µ –∞–∫—Ç–∏–≤–Ω–∞"

                discount = user.discount if user.discount else 0
            else:
                sub_info = "–ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
                discount = 0

            url = markdown.hlink(
                "–°—Å—ã–ª–∫–∞",
                f"https://t.me/Real_vpnBot?start={user.tg_id}",
            )
            text = (
                f"<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
                f"üÜî {user.tg_id} \n"
                f"üóì –ü–æ–¥–ø–∏—Å–∫–∞: <i>{sub_info}</i>\n"
                f"üéÅ –°–∫–∏–¥–∫–∞: <b>{discount}%</b>\n"
                f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <i>{url}</i>\n\n"
                f"<i>–ù–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ.</i>\n"
                f"<i>–î–ª—è –æ–ø–ª–∞—Ç—ã –∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—é—á—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏—à–∏ –Ω–∏–∂–µ‚¨áÔ∏è</i>"
            )
            if user:
                await message.answer_photo(
                    photo=FSInputFile(
                        path=file_path,
                    ),
                    caption=text,
                    reply_markup=build_account_kb(),
                )

            else:
                await message.answer_photo(
                    photo=FSInputFile(
                        path=file_path,
                    ),
                    caption=text,
                    reply_markup=build_account_kb(),
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –∞–∫–∫–∞—É–Ω—Ç: {e}")


@router.message(Command("payment", prefix="!/"))
async def refill_user_balance(message: Message):

    await message.answer_photo(
        photo=FSInputFile(
            path=file_path,
        ),
        caption=markdown.hbold("üí∞ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏:"),
        reply_markup=build_payment_kb(),
    )
