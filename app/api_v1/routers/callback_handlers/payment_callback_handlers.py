import datetime

from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile

from aiogram.utils import markdown


from app.api_v1.orm import AsyncOrm, Key


from app.api_v1.markups import (
    PayActions,
    PaymentCbData,
    ProductActions,
    ProductCbData,
    build_payment_kb,
    product_details_kb,
    build_account_kb,
    build_main_kb,
    get_success_pay_button,
)


from app.api_v1.utils import (
    outline_helper,
    payment_manager,
    set_expiration_date,
    get_duration,
    get_receipt,
    generate_order_number,
    get_user_info,
)
from app.api_v1.utils.logging import setup_logger


router = Router(name=__name__)

logger = setup_logger(__name__)


@router.callback_query(
    PaymentCbData.filter(
        F.action == PayActions.back_to_account,
    )
)
async def handle_back_button(call: CallbackQuery):
    await call.answer()
    user = await AsyncOrm.get_user(
        tg_id=call.from_user.id,
    )

    user_info = get_user_info(user)

    await call.message.edit_caption(
        caption=(
            f"<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
            f"üÜî {user.tg_id} \n"
            f"üóì <b>–ü–æ–¥–ø–∏—Å–∫–∞:<b> {user_info['sub_info']}\n\n"
            f"üéÅ <b>–°–∫–∏–¥–∫–∞:</b> {user_info['discount']}\n\n"
            f"<i>–î–ª—è –æ–ø–ª–∞—Ç—ã –∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è VPN –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–ª–∞–Ω—Å.\n</i>"
            f"<i>–î–ª—è –µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏—à–∏ –Ω–∏–∂–µ</i>"
        ),
        reply_markup=build_account_kb(user=user),
    )


@router.callback_query(
    ProductCbData.filter(F.action == ProductActions.details),
)
async def handle_product_actions__button(
    call: CallbackQuery,
    callback_data: ProductCbData,
):
    await call.answer()
    msg_text = markdown.text(
        markdown.hbold(f"–°—É–º–º–∞: {callback_data.price} —Ä—É–±"),
        markdown.hitalic("–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ"),
        sep="\n\n",
    )
    try:
        payment = await payment_manager.init_payment(
            amount=callback_data.price * 100,
            order_id=generate_order_number(),
            description=f"–û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Ññ {call.from_user.id}",
            receipt=get_receipt(price=callback_data.price),
        )
        await call.message.edit_caption(
            caption=msg_text,
            reply_markup=product_details_kb(
                payment_cb_data=payment,
            ),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–ª–∞—Ç–µ–∂—É: {e}")


@router.callback_query(
    ProductCbData.filter(F.action == ProductActions.back_to_choice),
)
async def handle_back_to_choice_button(
    call: CallbackQuery,
):
    await call.answer()
    await call.message.edit_caption(
        caption="üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞",
        reply_markup=build_payment_kb(),
    )


@router.callback_query(
    PaymentCbData.filter(F.action == PayActions.success),
)
async def handle_success_button(
    call: CallbackQuery,
    callback_data: PaymentCbData,
):

    payment_id = callback_data.payment_id

    try:
        payment = await payment_manager.check_payment_status(
            payment_id=payment_id,
        )
        await call.answer()
        if payment["Status"]:
            if payment["Status"] == "CONFIRMED":
                payment_duration = get_duration(payment)
                expiration = set_expiration_date(payment_duration)
                print(expiration)

                tg_id = call.from_user.id

                user = await AsyncOrm.get_user(tg_id=tg_id)
                if not user.key:
                    key = outline_helper.create_new_key(name=tg_id)

                    await AsyncOrm.update_user(
                        tg_id=tg_id,
                        subscription=True,
                        subscribe_date=datetime.datetime.today().strftime("%d-%m-%Y"),
                        expiration_date=expiration,
                        key=Key(
                            api_id=int(key.key_id),
                            name=key.name,
                            user_id=user.id,
                            value=key.access_url,
                        ),
                    )
                    msg = markdown.hbold(
                        f"–ü–æ–¥–ø–∏—Å–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞, –≤–æ—Ç –≤–∞—à –∫–ª—é—á \n\n" f"{key.access_url}"
                    )
                    await call.message.edit_caption(
                        caption=msg,
                        reply_markup=build_account_kb(user=user),
                    )

                else:
                    user = await AsyncOrm.get_user(tg_id=tg_id)
                    outline_helper.remove_key_limit(key_id=user.key.api_id)
                    await call.message.edit_caption(
                        caption="–ü–æ–¥–ø–∏—Å–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞, –¥–æ—Å—Ç—É–ø –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω üõú",
                        reply_markup=build_account_kb(user=user),
                    )

            else:
                # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                await call.message.edit_caption(
                    caption="–ü–ª–∞—Ç–µ–∂ –≤–µ—Ä–æ—è—Ç–Ω–æ –≤—Å—ë –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è,\n\n"
                    "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ",
                    reply_markup=product_details_kb(
                        success=True,
                    ),
                )
        else:
            payment = await payment_manager.init_payment(
                amount=callback_data.price * 100,
                order_id=generate_order_number(),
                description=f"–û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Ññ {call.from_user.id}",
                receipt=get_receipt(price=callback_data.price),
            )
            await call.message.edit_caption(
                caption="–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞,\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ",
                reply_markup=product_details_kb(
                    payment_cb_data=payment,
                ),
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")


@router.callback_query(
    ProductCbData.filter(
        F.action == ProductActions.back_to_root,
    )
)
async def handle_root_button(call: CallbackQuery):
    await call.answer()

    await call.message.edit_caption(
        caption=markdown.hbold(
            "üöÄ  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ 1 –∫–ª–∏–∫, –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏\n\n"
            "üõ°  –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º—ã –∏ –ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å\n\n"
            "üî•  –¢–≤–æ–π –ª–∏—á–Ω—ã–π VPN –ø–æ —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —Ü–µ–Ω–µ\n\n"
            "üí∞  –¶–µ–Ω–∞: 1Ã∂9Ã∂9Ã∂—Ä—É–± üí•129 —Ä—É–±/–º–µ—Å",
        ),
        reply_markup=build_main_kb(),
    )
