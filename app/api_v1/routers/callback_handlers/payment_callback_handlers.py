from aiogram import Router, F
from aiogram.types import CallbackQuery

from aiogram.utils import markdown


from app.api_v1.core import AsyncOrm, Key


from app.api_v1.markups import (
    ProfileActions,
    ProfileCbData,
    PayActions,
    PaymentCbData,
    ProductActions,
    ProductCbData,
    build_payment_kb,
    product_details_kb,
    build_account_kb,
    build_main_kb,
    get_success_pay_button,
)

from app.api_v1.utils.request_api import outline_helper
from app.api_v1.utils.yoomoney_pay_helper import get_payment

router = Router(name=__name__)


@router.callback_query(
    PaymentCbData.filter(
        F.action == PayActions.back_to_account,
    )
)
async def handle_back_button(call: CallbackQuery):
    await call.answer()
    user = await AsyncOrm.get_user(
        tg_id=call.from_user.id,
    )
    await call.message.edit_caption(
        (
            f"<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
            f"üÜî {user.tg_id} \n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance}—Ä—É–±\n\n"
            f"<i>–î–ª—è –æ–ø–ª–∞—Ç—ã –∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è VPN –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–ª–∞–Ω—Å.\n</i>"
            f"<i>–î–ª—è –µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏—à–∏ –Ω–∏–∂–µ</i>"
        ),
        reply_markup=build_account_kb(),
    )


@router.callback_query(
    ProductCbData.filter(F.action == ProductActions.details),
)
async def handle_product_actions__button(
    call: CallbackQuery,
    callback_data: ProductCbData,
):
    await call.answer()
    msg_text = markdown.text(
        markdown.hbold(f"–°—É–º–º–∞: {callback_data.price} —Ä—É–±"),
        markdown.hitalic("–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ"),
        sep="\n\n",
    )

    await call.message.edit_caption(
        caption=msg_text,
        reply_markup=product_details_kb(
            tg_id=call.from_user.id,
            payment_cb_data=callback_data,
        ),
    )
    tg_id = call.from_user.id

    payment = get_payment(tg_id=tg_id)
    if payment:
        balance = payment.balance
        operation = 2 - ((2 * 3) / 100)
        # operation = callback_data.price - ((callback_data.price * 3) / 100)
        print(callback_data.price)
        print(operation)
        if balance == operation:
            await call.message.edit_caption(
                caption="–û–ø—Ç–∞—Ç–∏–ª? –ñ–º–∏ –∫–Ω–æ–ø–∫—É ‚úÖ",
                reply_markup=get_success_pay_button(),
            )
        else:
            user = await AsyncOrm.get_user(tg_id=tg_id)
            await AsyncOrm.update_user(
                id=user.id,
                tg_id=tg_id,
                balance=payment.balance,
            )

            await call.message.edit_caption(
                caption="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ üò¢",
                reply_markup=product_details_kb(
                    tg_id=tg_id,
                    pay_in=operation,
                ),
            )


@router.callback_query(
    ProductCbData.filter(F.action == ProductActions.back_to_choice),
)
async def handle_back_to_choice_button(
    call: CallbackQuery,
):
    await call.answer()
    await call.message.edit_caption(
        caption="üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞",
        reply_markup=build_payment_kb(),
    )


@router.callback_query(
    ProductCbData.filter(F.action == ProductActions.success),
)
async def handle_success_button(
    call: CallbackQuery,
):
    await call.answer()
    tg_id = call.from_user.id
    payment = get_payment(tg_id=tg_id)
    user = await AsyncOrm.get_user(tg_id=tg_id)
    print(user.username)
    if not user.key:
        key = outline_helper.create_new_key(name=tg_id)

        await AsyncOrm.update_user(
            tg_id=tg_id,
            balance=payment.balance,
            subscribe_date=payment.operation_date,
            expiration_date=payment.expiration_date,
            key=Key(
                api_id=key.key_id,
                name=key.name,
                user_id=user.id,
                value=key.access_url,
            ),
        )

        await call.message.edit_caption(
            caption=(f"–ü–æ–¥–ø–∏—Å–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞, –≤–æ—Ç –≤–∞—à –∫–ª—é—á \n\n" f"{key.access_url}"),
            reply_markup=build_main_kb(),
        )

    else:
        user = await AsyncOrm.get_user(tg_id=tg_id)
        outline_helper.remove_key_limit(key_id=user.key.api_id)
        await call.message.edit_caption(
            caption="–ü–æ–¥–ø–∏—Å–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞, –¥–æ—Å—Ç—É–ø –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω üõú",
            reply_markup=build_account_kb(user=user),
        )


# PRICE = LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN", amount=150 * 100)


# @router.callback_query(PaymentCbData.filter(F.action == PayActions.pay))
# async def handle_pay_action_button(
#     call: CallbackQuery,
# ):
#     if settings.pay_token.split(":")[1] == "TEST":
#         await call.answer("–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!")
#     await call.answer()
#     await call.bot.send_invoice(
#         call.from_user.id,
#         title="–û–ø–ª–∞—Ç–∞ VPN",
#         description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏",
#         provider_token=settings.pay_token,
#         currency="rub",
#         photo_url="",
#         photo_width=416,
#         photo_height=234,
#         photo_size=416,
#         is_flexible=False,
#         need_phone_number=False,
#         need_email=False,
#         need_name=False,
#         need_shipping_address=False,
#         prices=[PRICE],
#         start_parameter="subscription",
#         payload="test-invoice-payload",
#     )


# @router.pre_checkout_query(lambda query: True)
# async def handle_pre_checkout_query(
#     pre_checkout_q: PreCheckoutQuery,
#     bot: Bot,
# ):
#     await bot.answer_pre_checkout_query(
#         pre_checkout_q.id,
#         ok=True,
#     )


# @router.message(F.action == ContentType.SUCCESSFUL_PAYMENT)
# async def successful_payment(message: Message):
#     payment_info = message.successful_payment.to_python()
#     for key, value in payment_info.items():
#         print(f"{key} = {value}")
#     await message.answer(
#         (
#             f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100}"
#             f"{message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!"
#         )
#     )
