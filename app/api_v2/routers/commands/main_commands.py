from datetime import datetime, timedelta
from aiogram.filters import Command, CommandStart
from aiogram.utils import markdown

from aiogram.types import Message, FSInputFile
from aiogram import Router

from app.api_v2.markups import (
    build_main_kb,
    build_payment_kb,
)

from app.api_v1.orm import AsyncOrm, Key

from app.api_v1.config import settings

from app.api_v1.utils import (
    check_for_referral,
    outline_helper,
    check_time_delta,
)

from app.api_v1.utils.logging import setup_logger

router = Router(name=__name__)
logger = setup_logger(__name__)

file_path = "app/api_v1/utils/images/image2.jpg"


@router.message(CommandStart())
async def command_start_handler(message: Message):

    try:
        tg_id = message.from_user.id
        user_exists = await AsyncOrm.get_user(tg_id=tg_id)

        if not user_exists:
            """Check user start command for referral link"""
            referrer_id = await check_for_referral(message)

            if referrer_id and referrer_id != tg_id:
                today = datetime.now()
                expiration_date = today + timedelta(
                    days=10 if referrer_id == settings.ADVERTISER_ID else 5
                )

                key = outline_helper.create_new_key(name=tg_id)
                new_user = await AsyncOrm.create_user(
                    tg_id=tg_id,
                    username=message.from_user.username,
                    subscription=True,
                    subscribe_date=today.strftime("%d-%m-%Y"),
                    expiration_date=expiration_date.strftime("%d-%m-%Y"),

                )
                await AsyncOrm.update_user(
                    tg_id=new_user.tg_id,
                    key=Key(
                        api_id=int(key.key_id),
                        name=key.name,
                        user_id=new_user.id,
                        value=key.access_url,
                    ),
                )

                await AsyncOrm.update_user(
                    tg_id=referrer_id,
                    referral=new_user,
                )
            else:
                await AsyncOrm.create_user(
                    tg_id=tg_id,
                    username=message.from_user.username,
                )
            sub_info = "–ù–µ –∞–∫—Ç–∏–≤–Ω–∞ ‚õîÔ∏è"

        else:
            if check_time_delta(date=user_exists.expiration_date):
                sub_info = f"–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {user_exists.expiration_date} ‚úÖ"
            else:
                sub_info = "–ù–µ –∞–∫—Ç–∏–≤–Ω–∞ ‚õîÔ∏è"
        sub = True if user_exists.subscription else False
        is_admin = True if user_exists.tg_id == int(settings.ADMIN_ID) else False
        await message.answer_photo(
            photo=FSInputFile(
                path=file_path,
            ),
            caption=markdown.hbold(
                "üöÄ  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ 1 –∫–ª–∏–∫, –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏\n\n"
                "üõ°  –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º—ã –∏ –ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å\n\n"
                "üî•  –¢–≤–æ–π –ª–∏—á–Ω—ã–π VPN –ø–æ —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —Ü–µ–Ω–µ\n\n"
                "üí∞  –¶–µ–Ω–∞: 1Ã∂9Ã∂9Ã∂—Ä—É–± üí•150 —Ä—É–±/–º–µ—Å\n\n",
                f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {sub_info}\n\n",
            ),
            reply_markup=build_main_kb(
                subscribe=sub,
                admin=is_admin,
            ),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç: {e}")


@router.message(Command("payment", prefix="!/"))
async def refill_user_balance(message: Message):

    await message.answer_photo(
        photo=FSInputFile(
            path=file_path,
        ),
        caption=markdown.hbold("üí∞ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏:"),
        reply_markup=build_payment_kb(),
    )
