from datetime import datetime

from aiogram import Router, F
from aiogram.utils import markdown
from aiogram.types import CallbackQuery
from app.api_v1.config import settings
from app.api_v1.orm.crud import AsyncOrm

from app.api_v2.markups import (
    MenuActions,
    MenuCbData,
    PayActions,
    PaymentCbData,
    root_kb,
    build_payment_kb,
    build_next_kb,
    build_main_kb,
)

from app.api_v1.utils import LEXICON_RU, check_time_delta
from app.api_v1.utils.logging import setup_logger

router = Router(name=__name__)
logger = setup_logger(__name__)


@router.callback_query(MenuCbData.filter(F.action == MenuActions.promo))
async def handle_promo_button(call: CallbackQuery):
    await call.answer()

    await call.message.edit_caption(
        caption="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ —á–∞—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π 7-–¥–Ω–µ–≤–Ω—ã–π —Ç—Ä–∏–∞–ª üéÅ",
        reply_markup=root_kb(),
    )


@router.callback_query(MenuCbData.filter(F.action == MenuActions.next))
async def handle_next_button(
    call: CallbackQuery,
):
    try:
        await call.answer()
        await call.message.edit_caption(
            caption="üí∞ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏: ‚¨áÔ∏è",
            reply_markup=build_payment_kb(),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã: {e}")


@router.callback_query(PaymentCbData.filter(F.action == PayActions.pay))
async def handle_pay_action_button(
    call: CallbackQuery,
):
    try:
        await call.answer()
        await call.message.edit_caption(
            caption=(
                "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline‚ùáÔ∏è –∏–∑ AppStore –∏–ª–∏ Google Play, "
                "–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ãüì±. "
                "–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Å–∫–∞—á–∞–µ—Ç–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µüí≤"
            ),
            reply_markup=build_next_kb(),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã: {e}")


@router.callback_query(MenuCbData.filter(F.action == MenuActions.back_root))
async def handle_back_root_button(call: CallbackQuery):
    await call.answer()
    user = await AsyncOrm.get_user(tg_id=call.from_user.id)
    if check_time_delta(date=user.expiration_date):
        sub_info = f"–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {user.expiration_date} ‚úÖ"
    else:
        sub_info = "–ù–µ –∞–∫—Ç–∏–≤–Ω–∞ ‚õîÔ∏è"
    sub = True if user.subscription else False
    is_admin = True if user.tg_id == int(settings.ADMIN_ID) else False
    await call.message.edit_caption(
        caption=markdown.hbold(
            "üöÄ  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ 1 –∫–ª–∏–∫, –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏\n\n"
            "üõ°  –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º—ã –∏ –ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å\n\n"
            "üî•  –¢–≤–æ–π –ª–∏—á–Ω—ã–π VPN –ø–æ —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —Ü–µ–Ω–µ\n\n"
            "üí∞  –¶–µ–Ω–∞: 1Ã∂9Ã∂9Ã∂—Ä—É–± üí•150 —Ä—É–±/–º–µ—Å\n\n",
            f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {sub_info}\n\n",
        ),
        reply_markup=build_main_kb(
            subscribe=sub,
            admin=is_admin,
        ),
    )


@router.callback_query(MenuCbData.filter(F.action == MenuActions.support))
async def handle_support_button(call: CallbackQuery):
    await call.answer()

    await call.message.edit_caption(
        caption=LEXICON_RU["help_info"],
        reply_markup=root_kb(),
    )


@router.callback_query(
    MenuCbData.filter(
        F.action == MenuActions.key,
    )
)
async def handle_show_key_button(call: CallbackQuery):
    await call.answer()
    user = await AsyncOrm.get_user(
        tg_id=call.from_user.id,
    )
    if user.key:
        try:
            key = user.key.value

            await call.message.edit_caption(
                caption=(f"–í–∞—à –∫–ª—é—á: üìå<pre>{key}</pre>\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ ‚òëÔ∏è"),
                reply_markup=root_kb(),
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—é—á—É: {e}")
